#include <stdio.h>
#include <stdlib.h>

typedef struct _listnode{
    int item;
    struct _listnode *next;
} ListNode;

typedef struct _linkedlist{
    int size;
    ListNode* head;
} LinkedList;

typedef struct _dblistNnde{
    int item;
    struct _dblistnode *pre;
    struct _dblistnode *next;
} DbListNode;


typedef ListNode StackNode;
typedef LinkedList Stack;

typedef ListNode QueueNode;
typedef _queue{
    int size;
    ListNode* head;
    ListNode* tail;
} Queue;

void printList(ListNode* cur){
    while(cur!=NULL){
        printf("%d\n", cur->item);
        cur = cur->next;
    }
}

ListNode* findNode(ListNode* cur, int i){
    if(cur==NULL||i<0)
        return NULL;
     while(i>0){
        cur = cur->next;
        if(cur==NULL)
            return NULL;
        i--;
    }
    return cur;
    }
}

int insertNode(ListNode **ptrHead, int i, int item){
    ListNode *cur, *newNode;
    if(*ptrHead==NULL||i==0){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = *ptrHead;
       *ptrHead = newNode;
       return 1;
    }
    else if((cur=findNode(*ptrHead, i-1)) != NULL){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = cur->next;
        cur->next = newNode;
        return 1;
    }
    return 0;
}

void deleteList(ListNode *cur){
    while(cur!=NULL){
        cur = cur->next;
    }
    free(cur);
}

int removeNode(ListNode **ptrHead, int index){
    ListNode *pre, *cur;

    if(*ptrHead==NULL){
        return 0;
    }

    if(index==0){
        cur = *ptrHead;
        *ptrHead = cur->next;
        free(cur);
        return 1;
    }

    if((pre=findNode(*ptrHead, index-1))!=NULL){
        if(pre->next==NULL) return 0;
        cur = pre->next;
        pre->next = cur->next;
        free(cur);
        return 1;
    }
    return 0;
}

int removeNode2(LinkedList *ll, int index){
    ListNode *pre, *cur;

    if(ll->head==NULL)  return 0;

    if(index==0){
        cur = ll->head;
        ll->head = cur->next;
        ll->size--;
        free(cur);
        return 1;
    }
    if((pre=findNode2(*ll, index-1))!=NULL){
        if(pre->next==NULL) return 0;
        cur = pre->next;
        pre->next = cur->next;
        ll->size--;
        free(cur);
        return 1;
    }
    return 0;
}

int sizeNode(ListNode* head){
    int count = 0;
    while(head!=NULL){
        head = head->next;
        count++;
    }
    return count;
}

void printList2(LinkedList ll){
    ListNode* tmp = ll.head;

    while(tmp!=NULL){
        printf("%d\n", tmp->item);
        tmp = tmp->next;
    }
}

ListNode* findNode2(LinkedList ll, int i){
    ListNode *tmp = ll.head;

    if(ll.size==0||i<0){
        return NULL;
    }
    while(i>0){
        tmp = tmp->next;
        if(tmp==NULL)
            return NULL;
        i--;
    }
    return tmp;
}

int insertNode2(LinkedList* ll, int i, int item){
    ListNode *cur, *newNode;
    if(ll->head==NULL||i==0){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = ll->head;
       ll->head = newNode;
       ll->size++;
       return 1;
    }
    else if((cur=findNode2(*ll, i-1)) != NULL){
        newNode = malloc(sizeof(ListNode));
        newNode->item = item;
        newNode->next = cur->next;
        cur->next = newNode;
        ll->size++;
        return 1;
    }
    return 0;
}

int sizeNode2(LinkedList ll){
    return ll.size;
}

int peek(Stack s){
    return s.head->item;
}

void push(Stack* sPtr, int item){
    StackNode* newNode;
    newNode = malloc(sizeof(StackNode));
    newNode->item = item;
    newNode->next = sPtr->head;

    sPtr->head = newNode;
    sPtr->size++;
}

int pop(Stack* sPtr){
    if(sPtr==NULL || sPtr->head==NULL){
        return 0;
    }else{
        StackNode* temp = sPtr->head;
        sPtr->head = sPtr->head->next;
        free(temp);
        sPtr->size--;
        return 1;
    }
}

int isEmptyStack(Stack s){
    if(s.size==0)   return 1;
    return 0;
}

int getFront(Queue q){
    return q.head->item;
}

void enqueue(Queue *qPtr, int item){
    QueueNode* newNode;
    newNode = malloc(sizeof(QueueNode));
    newNode->item = item;
    newNode->next = NULL;

    if(isEmptyQueue(*qPtr))
        qPtr->head = newNode;
    else
        qPtr->tail->next = newNode;
    qPtr->tail = newNode;
    qPtr->size++;
}

int dequeue(Queue *qPtr){
    if(qPtr==NULL||qPtr->head==NULL){
        return 0;
    }else{
        QueueNode* temp = qPtr->head;
        qPtr->head = qPtr->head->next;
        if(qPtr->head==NULL)
            qPtr->tail = NULL;
        free(temp);
        qPtr->size--;
        return 1;
    }
}

int isEmptyQueue(Queue q){
    if(q.size==0)   return 1;
    return 0;
}